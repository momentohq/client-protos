import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("momento.shared.codeartifact-token")
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm")
    id("org.jlleitschuh.gradle.ktlint")
    id("org.jlleitschuh.gradle.ktlint-idea")
}

val getCodeArtifactToken: () -> String by extra

repositories {
    maven {
        url = uri("https://momento-prod-401011790710.d.codeartifact.us-west-2.amazonaws.com/maven/maven-momento/")
        credentials {
            username = "aws"
            password = getCodeArtifactToken()
        }
    }

    maven {
        url = uri("https://momento-prod-401011790710.d.codeartifact.us-west-2.amazonaws.com/maven/maven-upstream/")
        credentials {
            username = "aws"
            password = getCodeArtifactToken()
        }
    }
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // slf4j API, which is necessary in order to use logback.
    implementation("org.slf4j:slf4j-api:1.7.32")

    // logback-classic sets up logback as the default underlying SLF4J logger, which
    // lets us create logback config files that use logback-compatible appenders and encoders
    implementation("ch.qos.logback:logback-classic:1.2.5")
    // logstash encoder gives us support for JSON logging and structured arguments for logback (in Java)
    implementation("net.logstash.logback:logstash-logback-encoder:6.6")

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
}

tasks.test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "11"
}

ktlint {
    version.set("0.42.1")
    enableExperimentalRules.set(true)

    outputToConsole.set(true)
    //        ignoreFailures.set(true)
    coloredOutput.set(true)
    verbose.set(true)
    filter {
        exclude("**/generated/**")
        exclude("**/build/**")
    }
}
