name: On Push

on:
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v2

      - name: Set release
        id: semrel
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true

      - name: Output release
        id: release
        run: echo "::set-output name=release::${{ steps.semrel.outputs.version }}"

  publish_javascript:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: "https://registry.npmjs.org"

      - name: Install protoc
        run: ./install_protoc.sh

      - name: Build package
        run: |
          set -e
          set -x
          export PATH=`pwd`/protoc/bin/:$PATH
          pushd javascript
            npm ci
            npm run build
          popd
        shell: bash

      - name: Publish npm package
        run: |
          export VERSION="${{ needs.release.outputs.version }}"
          echo "Publishing package with version $VERSION"
          pushd javascript
            mv package.json package.json.ORIG
            cat package.json.ORIG|jq ". += {\"version\": \"$VERSION\"}" > package.json
            npm publish
          popd
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
# FIXME: currently this is not working because we do not support private packages in our @gomomento npmjs repo so build is failing.
#        If we intend for this web version of our proto's to be private for now for internal use only then we should revisit and 
#        publish to our internal repo's instead. Other wise if we feel we are ready to make this web version of our protos public for
#        for customer use and want to be public we should add the access public flag explicitly on our package publish steps here with:
#               npm publish --access public

#   publish_javascript-web:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     needs: release

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       - uses: actions/checkout@v2

#       - name: Install Node
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16
#           registry-url: "https://registry.npmjs.org"

#       - name: Install protoc
#         run: ./install_protoc.sh

#       - name: Build package
#         run: |
#           set -e
#           set -x
#           export PATH=`pwd`/protoc/bin/:$PATH
#           pushd javascript-web
#             npm ci
#             npm run build
#           popd
#         shell: bash

#       - name: Publish npm package
#         run: |
#           export VERSION="${{ needs.release.outputs.version }}"
#           echo "Publishing package with version $VERSION"
#           pushd javascript-web
#             mv package.json package.json.ORIG
#             cat package.json.ORIG|jq ". += {\"version\": \"$VERSION\"}" > package.json
#             npm publish
#           popd
#         shell: bash
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  publish_kotlin:
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # TODO User: arn:aws:iam::***:user/shared-control-plane-deploy-user is not authorized to perform: sts:TagSession on resource: arn:aws:iam::***:role/control-plane-remote-deployer
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.PROD_CICD_DEPLOY_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_CICD_DEPLOY_USER_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::401011790710:role/control-plane-remote-deployer
          role-session-name: cicd-deployer
          role-duration-seconds: 900

      - name: Get CodeArtifact token
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
                                            --domain momento-prod --domain-owner 401011790710 \
                                            --query authorizationToken --output text)
          echo "::add-mask::$TOKEN"
          echo "CODEARTIFACT_AUTH_TOKEN=$TOKEN" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish to CodeArtifact
        run: |
          VERSION="${{needs.release.outputs.version}}"
          echo "version: ${VERSION}"
          pushd kotlin-messages
            ./gradlew publish -Pversion=$VERSION
          popd

  publish_python:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build grpcio-tools

      - name: Configure PyPI publish credentials
        run: |
          set -e
          set -x
          pushd python
            ./pypi_setup.sh __token__ ${{ secrets.CLIENT_PROTO_PYPI_TOKEN }} >> ~/.pypirc
          popd
        shell: bash

      - name: Build and publish package
        run: |
          set -e
          set -x
          pushd python
            export PYPI_MOMENTO_WIRE_TYPE_VERSION="${{needs.release.outputs.version}}"
            if [ -z "$PYPI_MOMENTO_WIRE_TYPE_VERSION"]
            then
              echo "Using default version"
              export PYPI_MOMENTO_WIRE_TYPE_VERSION="0.0.dev"`date +%s`
            fi
            echo "PYPI_MOMENTO_WIRE_TYPE_VERSION=${PYPI_MOMENTO_WIRE_TYPE_VERSION}"
            ./buildpypi.sh
            python -m twine upload dist/* --config-file ~/.pypirc
          popd
        shell: bash

  publish_csharp:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Pack and Publish
        run: |
          set -x
          pushd csharp
            VERSION="${{needs.release.outputs.version}}"
            echo "version: ${VERSION}"
            dotnet build --configuration Release
            dotnet pack -property:Version=${VERSION} --configuration Release
            pushd bin/Release
              dotnet nuget push Momento.Protos.${VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key=${{secrets.NUGET_API_KEY}}
            popd
          popd
        shell: bash

  publish_rust:
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Get current time
        uses: gerred/actions/current-time@master
        id: current-time

      - uses: actions/checkout@v2

      - name: Update Cargo Version
        run: |
          pushd rust
            chmod +x set_cargo_package_version.sh
            ./set_cargo_package_version.sh ${{needs.release.outputs.version}}
          popd
        shell: bash

      - name: Build
        run: |
          set -e
          set -x
          export PATH=`pwd`/protoc/bin/:$HOME/.cargo/bin:$PATH
          pushd rust
            VERSION="${{needs.release.outputs.version}}"
            cargo build --release
          popd
        shell: bash

      - name: Release
        env:
          # TODO: Match the token with https://github.com/momentohq/client-sdk-rust/blob/main/.github/workflows/cd.yml
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_PUBLISH_TOKEN }}
        run: |
          set -e
          set -x
          export PATH=`pwd`/protoc/bin/:$HOME/.cargo/bin:$PATH
          pushd rust
            cargo publish --allow-dirty --no-verify
          popd
        shell: bash
