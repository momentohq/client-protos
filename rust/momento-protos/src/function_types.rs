// This file is @generated by prost-build.
/// A Function is an extension of Momento; for users to build their own Momento apis.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Function {
    /// This is an immutable unique identifier for the function, across versions.
    #[prost(string, tag = "1")]
    pub function_id: ::prost::alloc::string::String,
    /// The name of the function.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// A convenience for consoles.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// What is the current version of the function set to use upon invocation?
    #[prost(message, optional, tag = "4")]
    pub current_version: ::core::option::Option<CurrentFunctionVersion>,
    /// What is the actual latest version of the function?
    #[prost(uint32, tag = "5")]
    pub latest_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurrentFunctionVersion {
    #[prost(oneof = "current_function_version::Version", tags = "1, 2")]
    pub version: ::core::option::Option<current_function_version::Version>,
}
/// Nested message and enum types in `_CurrentFunctionVersion`.
pub mod current_function_version {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Latest {}
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Pinned {
        #[prost(uint32, tag = "1")]
        pub pinned_version: u32,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Version {
        #[prost(message, tag = "1")]
        Latest(Latest),
        #[prost(message, tag = "2")]
        Pinned(Pinned),
    }
}
/// A specific version of a Function, with its versioned configuration data.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FunctionVersion {
    /// This unique identifier should change when a function's metadata is updated
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<FunctionId>,
    /// The wasm ID this function uses
    #[prost(message, optional, tag = "20")]
    pub wasm_id: ::core::option::Option<WasmId>,
    /// The environment variables available to this function via the WASI environment interface
    #[prost(map = "string, message", tag = "40")]
    pub environment: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        EnvironmentValue,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnvironmentValue {
    #[prost(oneof = "environment_value::Value", tags = "1")]
    pub value: ::core::option::Option<environment_value::Value>,
}
/// Nested message and enum types in `_EnvironmentValue`.
pub mod environment_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// An environment variable value
        #[prost(string, tag = "1")]
        Literal(::prost::alloc::string::String),
    }
}
/// Metadata for a wasm archive. These can exist independently of a Function.
/// For example, Templates are just special Wasm archives that are accessible to more than 1 user.
/// In this way, we can manage Templates independently of concrete user Functions, and users can
/// reuse their wasms across multiple Functions (which would be different configurations).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Wasm {
    /// The globally unique identifier tuple for this wasm.
    /// It may be a shared ID, as in the case of a Template Function, or it may be
    /// unique to one Function.
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<WasmId>,
    /// The name of the wasm.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The description of the wasm.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FunctionId {
    /// Globally unique id, this is stable across versions of the Function.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// A sub-id of sorts. Together with the id, this is a unique identifier for a function configuration.
    #[prost(uint32, tag = "2")]
    pub version: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WasmId {
    /// Globally unique id, this is stable across versions of the wasm.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// A sub-id of sorts. Together with the id, this is a unique identifier for a wasm binary.
    #[prost(uint32, tag = "2")]
    pub version: u32,
}
