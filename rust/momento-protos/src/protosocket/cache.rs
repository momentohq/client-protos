// This file is @generated by prost-build.
/// All messages sent to the server by a client must be CacheCommands.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheCommand {
    /// This is the unique identifier used for the command. The server will return this id in the response.
    /// As protosocket-rpc does not necessarily respond in-order this is used to correlate responses with requests.
    #[prost(uint64, tag = "2")]
    pub message_id: u64,
    /// The protosocket-rpc control code.
    #[prost(uint32, tag = "3")]
    pub control_code: u32,
    /// The protosocket-rpc rpc kind.
    #[prost(oneof = "cache_command::RpcKind", tags = "10")]
    pub rpc_kind: ::core::option::Option<cache_command::RpcKind>,
}
/// Nested message and enum types in `CacheCommand`.
pub mod cache_command {
    /// The protosocket-rpc rpc kind.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RpcKind {
        #[prost(message, tag = "10")]
        Unary(super::Unary),
    }
}
/// These are Unary (single request -> single response) commands.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Unary {
    #[prost(oneof = "unary::Command", tags = "1, 2, 3, 4")]
    pub command: ::core::option::Option<unary::Command>,
}
/// Nested message and enum types in `Unary`.
pub mod unary {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        /// Authenticate provides the auth token to be used for all future requests on the connection.
        /// - It MUST be the first command sent on every cache connection.
        /// - It MAY be resent later in the connection to provide a different auth token.
        ///    - If sent mid-connection, clients SHOULD wait to pipeline further commands until the corresponding response is received.
        ///      If clients do not wait, it is indeterminate whether the prior or new auth token will be used for those requests.
        #[prost(message, tag = "1")]
        Auth(super::AuthenticateCommand),
        /// Retrieves an item from cache.
        #[prost(message, tag = "2")]
        Get(super::GetCommand),
        /// Set an item in cache.
        #[prost(message, tag = "3")]
        Set(super::SetCommand),
        /// Deletes an item from cache.
        #[prost(message, tag = "4")]
        Delete(super::DeleteCommand),
    }
}
/// All messages sent by the server to a client will be CacheResponses.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheResponse {
    /// This is the message id provided in the corresponding command.
    #[prost(uint64, tag = "1")]
    pub message_id: u64,
    /// The protosocket-rpc control code.
    #[prost(uint32, tag = "2")]
    pub control_code: u32,
    /// The specific response.
    #[prost(oneof = "cache_response::Kind", tags = "9, 10, 11, 12, 13")]
    pub kind: ::core::option::Option<cache_response::Kind>,
}
/// Nested message and enum types in `CacheResponse`.
pub mod cache_response {
    /// The specific response.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "9")]
        Error(super::super::common::CommandError),
        #[prost(message, tag = "10")]
        Auth(super::AuthenticateResponse),
        #[prost(message, tag = "11")]
        Get(super::GetResponse),
        #[prost(message, tag = "12")]
        Set(super::SetResponse),
        #[prost(message, tag = "13")]
        Delete(super::DeleteResponse),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthenticateCommand {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AuthenticateResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCommand {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetCommand {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub ttl_milliseconds: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCommand {
    #[prost(string, tag = "1")]
    pub namespace: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteResponse {}
