// This file is @generated by prost-build.
/// Leaderboards are made up of many of these.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Element {
    /// A player identifier, session identifier, browser identifier or whatever other kind of
    /// identifier you use for this scoreboard. The full unsigned 64 bit range is allowed here,
    /// between 0 and 2^63-1 inclusive.
    /// An id can only appear in a leaderboard one time. You can't have 2 scores for 1 player,
    /// unless that player has 2 ids!
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The value by which this element is sorted within the leaderboard.
    #[prost(double, tag = "3")]
    pub score: f64,
}
/// Query APIs returning RankedElement offer the familiar Element id and score tuple, but they
/// also include the rank per the individual API's ranking semantic.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankedElement {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub rank: u32,
    #[prost(double, tag = "4")]
    pub score: f64,
}
/// Query APIs using RankRange expect a limit of 8192 elements. Requesting a range wider than
/// that is expected to return an error.
///
/// RankRange models half-open ranges: 0..4 refers to elements 0, 1, 2 and 3.
///
/// Example permissible ranges:
/// * 0..8192
/// * 1..8193
/// * 123..8315
/// * 0..1
/// * 1..4
/// * 13..17
///
/// Example error ranges:
/// * 0..0
/// * 4..3
/// * 0..8193
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankRange {
    #[prost(uint32, tag = "1")]
    pub start_inclusive: u32,
    #[prost(uint32, tag = "2")]
    pub end_exclusive: u32,
}
/// Query APIs using ScoreRange may match more than the limit of 8192 elements. These apis will
/// include an offset and limit parameter pair, which can be used to page through score ranges
/// matching many elements.
///
/// ScoreRange models half-open ranges: 0..4 refers to scores 0, 1.1234, 2.5 and 3.999.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScoreRange {
    #[prost(oneof = "score_range::Min", tags = "1, 5")]
    pub min: ::core::option::Option<score_range::Min>,
    #[prost(oneof = "score_range::Max", tags = "3, 6")]
    pub max: ::core::option::Option<score_range::Max>,
}
/// Nested message and enum types in `_ScoreRange`.
pub mod score_range {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Min {
        #[prost(message, tag = "1")]
        UnboundedMin(super::super::common::Unbounded),
        /// IEEE 754 single precision 64 bit floating point number.
        /// Momento does not support NaN or Inf in leaderboards.
        #[prost(double, tag = "5")]
        MinInclusive(f64),
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Max {
        #[prost(message, tag = "3")]
        UnboundedMax(super::super::common::Unbounded),
        /// IEEE 754 single precision 64 bit floating point number.
        /// Momento does not support NaN or Inf in leaderboards.
        #[prost(double, tag = "6")]
        MaxExclusive(f64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteLeaderboardRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLeaderboardLengthRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLeaderboardLengthResponse {
    #[prost(uint32, tag = "1")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertElementsRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
    /// You can have up to 8192 elements in this list.
    #[prost(message, repeated, tag = "3")]
    pub elements: ::prost::alloc::vec::Vec<Element>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByRankRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub rank_range: ::core::option::Option<RankRange>,
    #[prost(enumeration = "Order", tag = "4")]
    pub order: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByRankResponse {
    #[prost(message, repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<RankedElement>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRankRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "3")]
    pub ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Order", tag = "4")]
    pub order: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRankResponse {
    #[prost(message, repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<RankedElement>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveElementsRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
    /// You can have up to 8192 ids in this list.
    #[prost(uint32, repeated, tag = "3")]
    pub ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByScoreRequest {
    #[prost(string, tag = "2")]
    pub leaderboard: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub score_range: ::core::option::Option<ScoreRange>,
    /// Where should we start returning scores from in the elements within this range?
    #[prost(uint32, tag = "4")]
    pub offset: u32,
    /// How many elements should we limit to returning? (8192 max)
    #[prost(uint32, tag = "5")]
    pub limit_elements: u32,
    #[prost(enumeration = "Order", tag = "6")]
    pub order: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetByScoreResponse {
    #[prost(message, repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<RankedElement>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCompetitionRankRequest {
    #[prost(string, tag = "1")]
    pub leaderboard: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<u32>,
    /// If not specified, the order is descending.
    #[prost(enumeration = "Order", optional, tag = "3")]
    pub order: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCompetitionRankResponse {
    #[prost(message, repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<RankedElement>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Order {
    /// Ascending order (0 is the lowest-scoring rank)
    Ascending = 0,
    /// Descending order (0 is the highest-scoring rank)
    Descending = 1,
}
impl Order {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ascending => "ASCENDING",
            Self::Descending => "DESCENDING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASCENDING" => Some(Self::Ascending),
            "DESCENDING" => Some(Self::Descending),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod leaderboard_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Like a sorted set, but for leaderboards!
    ///
    /// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
    /// Scores are single-precision floating point numbers.
    ///
    /// Each ID can have only 1 score.
    ///
    /// For batchy, multi-element apis, limits are 8192 elements per api call.
    ///
    /// Scores are IEEE 754 single-precision floating point numbers. This has a few
    /// implications you should be aware of, but the one most likely to affect you is that
    /// below -16777216 and above 16777216, not all integers are able to be represented.
    #[derive(Debug, Clone)]
    pub struct LeaderboardClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl LeaderboardClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> LeaderboardClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> LeaderboardClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            LeaderboardClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Deletes a leaderboard. After this call, you're not incurring storage cost for this leaderboard anymore.
        pub async fn delete_leaderboard(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteLeaderboardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/DeleteLeaderboard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "DeleteLeaderboard"));
            self.inner.unary(req, path, codec).await
        }
        /// Insert or update elements in a leaderboard. You can do up to 8192 elements per call.
        /// There is no partial failure: Upsert succeeds or fails.
        pub async fn upsert_elements(
            &mut self,
            request: impl tonic::IntoRequest<super::UpsertElementsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/UpsertElements",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "UpsertElements"));
            self.inner.unary(req, path, codec).await
        }
        /// Remove up to 8192 elements at a time from a leaderboard. Elements are removed by id.
        pub async fn remove_elements(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveElementsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/RemoveElements",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "RemoveElements"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the length of a leaderboard in terms of ID count.
        pub async fn get_leaderboard_length(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLeaderboardLengthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLeaderboardLengthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/GetLeaderboardLength",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("leaderboard.Leaderboard", "GetLeaderboardLength"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get a range of elements.
        /// * Ordinal, 0-based rank.
        /// * Range can span up to 8192 elements.
        /// See RankRange for details about permissible ranges.
        pub async fn get_by_rank(
            &mut self,
            request: impl tonic::IntoRequest<super::GetByRankRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetByRankResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/GetByRank",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "GetByRank"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the rank of a list of particular ids in the leaderboard.
        /// * Ordinal, 0-based rank.
        pub async fn get_rank(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRankRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRankResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/GetRank",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "GetRank"));
            self.inner.unary(req, path, codec).await
        }
        /// Get a range of elements by a score range.
        /// * Ordinal, 0-based rank.
        ///
        /// You can request up to 8192 elements at a time. To page through many elements that all
        /// fall into a score range you can repeatedly invoke this api with the offset parameter.
        pub async fn get_by_score(
            &mut self,
            request: impl tonic::IntoRequest<super::GetByScoreRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetByScoreResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/GetByScore",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("leaderboard.Leaderboard", "GetByScore"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the competition ranks of a list of elements.
        /// Ranks start at 0. The default ordering is descending.
        /// i.e. elements with higher scores have lower ranks.
        pub async fn get_competition_rank(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCompetitionRankRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCompetitionRankResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/leaderboard.Leaderboard/GetCompetitionRank",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("leaderboard.Leaderboard", "GetCompetitionRank"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod leaderboard_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with LeaderboardServer.
    #[async_trait]
    pub trait Leaderboard: std::marker::Send + std::marker::Sync + 'static {
        /// Deletes a leaderboard. After this call, you're not incurring storage cost for this leaderboard anymore.
        async fn delete_leaderboard(
            &self,
            request: tonic::Request<super::DeleteLeaderboardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        /// Insert or update elements in a leaderboard. You can do up to 8192 elements per call.
        /// There is no partial failure: Upsert succeeds or fails.
        async fn upsert_elements(
            &self,
            request: tonic::Request<super::UpsertElementsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        /// Remove up to 8192 elements at a time from a leaderboard. Elements are removed by id.
        async fn remove_elements(
            &self,
            request: tonic::Request<super::RemoveElementsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        /// Returns the length of a leaderboard in terms of ID count.
        async fn get_leaderboard_length(
            &self,
            request: tonic::Request<super::GetLeaderboardLengthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLeaderboardLengthResponse>,
            tonic::Status,
        >;
        /// Get a range of elements.
        /// * Ordinal, 0-based rank.
        /// * Range can span up to 8192 elements.
        /// See RankRange for details about permissible ranges.
        async fn get_by_rank(
            &self,
            request: tonic::Request<super::GetByRankRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetByRankResponse>,
            tonic::Status,
        >;
        /// Get the rank of a list of particular ids in the leaderboard.
        /// * Ordinal, 0-based rank.
        async fn get_rank(
            &self,
            request: tonic::Request<super::GetRankRequest>,
        ) -> std::result::Result<tonic::Response<super::GetRankResponse>, tonic::Status>;
        /// Get a range of elements by a score range.
        /// * Ordinal, 0-based rank.
        ///
        /// You can request up to 8192 elements at a time. To page through many elements that all
        /// fall into a score range you can repeatedly invoke this api with the offset parameter.
        async fn get_by_score(
            &self,
            request: tonic::Request<super::GetByScoreRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetByScoreResponse>,
            tonic::Status,
        >;
        /// Get the competition ranks of a list of elements.
        /// Ranks start at 0. The default ordering is descending.
        /// i.e. elements with higher scores have lower ranks.
        async fn get_competition_rank(
            &self,
            request: tonic::Request<super::GetCompetitionRankRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCompetitionRankResponse>,
            tonic::Status,
        >;
    }
    /// Like a sorted set, but for leaderboards!
    ///
    /// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
    /// Scores are single-precision floating point numbers.
    ///
    /// Each ID can have only 1 score.
    ///
    /// For batchy, multi-element apis, limits are 8192 elements per api call.
    ///
    /// Scores are IEEE 754 single-precision floating point numbers. This has a few
    /// implications you should be aware of, but the one most likely to affect you is that
    /// below -16777216 and above 16777216, not all integers are able to be represented.
    #[derive(Debug)]
    pub struct LeaderboardServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> LeaderboardServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for LeaderboardServer<T>
    where
        T: Leaderboard,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/leaderboard.Leaderboard/DeleteLeaderboard" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteLeaderboardSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::DeleteLeaderboardRequest>
                    for DeleteLeaderboardSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteLeaderboardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::delete_leaderboard(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteLeaderboardSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/UpsertElements" => {
                    #[allow(non_camel_case_types)]
                    struct UpsertElementsSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::UpsertElementsRequest>
                    for UpsertElementsSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpsertElementsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::upsert_elements(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpsertElementsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/RemoveElements" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveElementsSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::RemoveElementsRequest>
                    for RemoveElementsSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveElementsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::remove_elements(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveElementsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/GetLeaderboardLength" => {
                    #[allow(non_camel_case_types)]
                    struct GetLeaderboardLengthSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::GetLeaderboardLengthRequest>
                    for GetLeaderboardLengthSvc<T> {
                        type Response = super::GetLeaderboardLengthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLeaderboardLengthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::get_leaderboard_length(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLeaderboardLengthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/GetByRank" => {
                    #[allow(non_camel_case_types)]
                    struct GetByRankSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::GetByRankRequest>
                    for GetByRankSvc<T> {
                        type Response = super::GetByRankResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetByRankRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::get_by_rank(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetByRankSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/GetRank" => {
                    #[allow(non_camel_case_types)]
                    struct GetRankSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::GetRankRequest>
                    for GetRankSvc<T> {
                        type Response = super::GetRankResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRankRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::get_rank(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRankSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/GetByScore" => {
                    #[allow(non_camel_case_types)]
                    struct GetByScoreSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::GetByScoreRequest>
                    for GetByScoreSvc<T> {
                        type Response = super::GetByScoreResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetByScoreRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::get_by_score(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetByScoreSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/leaderboard.Leaderboard/GetCompetitionRank" => {
                    #[allow(non_camel_case_types)]
                    struct GetCompetitionRankSvc<T: Leaderboard>(pub Arc<T>);
                    impl<
                        T: Leaderboard,
                    > tonic::server::UnaryService<super::GetCompetitionRankRequest>
                    for GetCompetitionRankSvc<T> {
                        type Response = super::GetCompetitionRankResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCompetitionRankRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Leaderboard>::get_competition_rank(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCompetitionRankSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for LeaderboardServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "leaderboard.Leaderboard";
    impl<T> tonic::server::NamedService for LeaderboardServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
