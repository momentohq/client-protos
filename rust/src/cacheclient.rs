// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cacheclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GetRequest {
    // message fields
    pub cache_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRequest {
    fn default() -> &'a GetRequest {
        <GetRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRequest {
    pub fn new() -> GetRequest {
        ::std::default::Default::default()
    }

    // bytes cache_key = 1;


    pub fn get_cache_key(&self) -> &[u8] {
        &self.cache_key
    }
    pub fn clear_cache_key(&mut self) {
        self.cache_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cache_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cache_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cache_key
    }

    // Take field
    pub fn take_cache_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cache_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cache_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cache_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.cache_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cache_key.is_empty() {
            os.write_bytes(1, &self.cache_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRequest {
        GetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cache_key",
                |m: &GetRequest| { &m.cache_key },
                |m: &mut GetRequest| { &mut m.cache_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetRequest>(
                "GetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetRequest {
        static instance: ::protobuf::rt::LazyV2<GetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetRequest::new)
    }
}

impl ::protobuf::Clear for GetRequest {
    fn clear(&mut self) {
        self.cache_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResponse {
    // message fields
    pub result: ECacheResult,
    pub cache_body: ::std::vec::Vec<u8>,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResponse {
    fn default() -> &'a GetResponse {
        <GetResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResponse {
    pub fn new() -> GetResponse {
        ::std::default::Default::default()
    }

    // .cache_client.ECacheResult result = 1;


    pub fn get_result(&self) -> ECacheResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ECacheResult::Internal_Server_Error;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ECacheResult) {
        self.result = v;
    }

    // bytes cache_body = 2;


    pub fn get_cache_body(&self) -> &[u8] {
        &self.cache_body
    }
    pub fn clear_cache_body(&mut self) {
        self.cache_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_cache_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.cache_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cache_body
    }

    // Take field
    pub fn take_cache_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cache_body, ::std::vec::Vec::new())
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cache_body)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ECacheResult::Internal_Server_Error {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.cache_body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cache_body);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ECacheResult::Internal_Server_Error {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if !self.cache_body.is_empty() {
            os.write_bytes(2, &self.cache_body)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResponse {
        GetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ECacheResult>>(
                "result",
                |m: &GetResponse| { &m.result },
                |m: &mut GetResponse| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cache_body",
                |m: &GetResponse| { &m.cache_body },
                |m: &mut GetResponse| { &mut m.cache_body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &GetResponse| { &m.message },
                |m: &mut GetResponse| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResponse>(
                "GetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResponse {
        static instance: ::protobuf::rt::LazyV2<GetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResponse::new)
    }
}

impl ::protobuf::Clear for GetResponse {
    fn clear(&mut self) {
        self.result = ECacheResult::Internal_Server_Error;
        self.cache_body.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetRequest {
    // message fields
    pub cache_key: ::std::vec::Vec<u8>,
    pub cache_body: ::std::vec::Vec<u8>,
    pub ttl_milliseconds: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRequest {
    fn default() -> &'a SetRequest {
        <SetRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetRequest {
    pub fn new() -> SetRequest {
        ::std::default::Default::default()
    }

    // bytes cache_key = 1;


    pub fn get_cache_key(&self) -> &[u8] {
        &self.cache_key
    }
    pub fn clear_cache_key(&mut self) {
        self.cache_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cache_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cache_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cache_key
    }

    // Take field
    pub fn take_cache_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cache_key, ::std::vec::Vec::new())
    }

    // bytes cache_body = 2;


    pub fn get_cache_body(&self) -> &[u8] {
        &self.cache_body
    }
    pub fn clear_cache_body(&mut self) {
        self.cache_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_cache_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.cache_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cache_body
    }

    // Take field
    pub fn take_cache_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cache_body, ::std::vec::Vec::new())
    }

    // uint32 ttl_milliseconds = 3;


    pub fn get_ttl_milliseconds(&self) -> u32 {
        self.ttl_milliseconds
    }
    pub fn clear_ttl_milliseconds(&mut self) {
        self.ttl_milliseconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl_milliseconds(&mut self, v: u32) {
        self.ttl_milliseconds = v;
    }
}

impl ::protobuf::Message for SetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cache_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cache_body)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ttl_milliseconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cache_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.cache_key);
        }
        if !self.cache_body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cache_body);
        }
        if self.ttl_milliseconds != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ttl_milliseconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cache_key.is_empty() {
            os.write_bytes(1, &self.cache_key)?;
        }
        if !self.cache_body.is_empty() {
            os.write_bytes(2, &self.cache_body)?;
        }
        if self.ttl_milliseconds != 0 {
            os.write_uint32(3, self.ttl_milliseconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRequest {
        SetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cache_key",
                |m: &SetRequest| { &m.cache_key },
                |m: &mut SetRequest| { &mut m.cache_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "cache_body",
                |m: &SetRequest| { &m.cache_body },
                |m: &mut SetRequest| { &mut m.cache_body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ttl_milliseconds",
                |m: &SetRequest| { &m.ttl_milliseconds },
                |m: &mut SetRequest| { &mut m.ttl_milliseconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRequest>(
                "SetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRequest {
        static instance: ::protobuf::rt::LazyV2<SetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRequest::new)
    }
}

impl ::protobuf::Clear for SetRequest {
    fn clear(&mut self) {
        self.cache_key.clear();
        self.cache_body.clear();
        self.ttl_milliseconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetResponse {
    // message fields
    pub result: ECacheResult,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetResponse {
    fn default() -> &'a SetResponse {
        <SetResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetResponse {
    pub fn new() -> SetResponse {
        ::std::default::Default::default()
    }

    // .cache_client.ECacheResult result = 1;


    pub fn get_result(&self) -> ECacheResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ECacheResult::Internal_Server_Error;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ECacheResult) {
        self.result = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ECacheResult::Internal_Server_Error {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ECacheResult::Internal_Server_Error {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetResponse {
        SetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ECacheResult>>(
                "result",
                |m: &SetResponse| { &m.result },
                |m: &mut SetResponse| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &SetResponse| { &m.message },
                |m: &mut SetResponse| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetResponse>(
                "SetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetResponse {
        static instance: ::protobuf::rt::LazyV2<SetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetResponse::new)
    }
}

impl ::protobuf::Clear for SetResponse {
    fn clear(&mut self) {
        self.result = ECacheResult::Internal_Server_Error;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ECacheResult {
    Internal_Server_Error = 0,
    Ok = 1,
    Hit = 2,
    Miss = 3,
    Bad_Request = 4,
    Unauthorized = 5,
    Service_Unavailable = 6,
}

impl ::protobuf::ProtobufEnum for ECacheResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECacheResult> {
        match value {
            0 => ::std::option::Option::Some(ECacheResult::Internal_Server_Error),
            1 => ::std::option::Option::Some(ECacheResult::Ok),
            2 => ::std::option::Option::Some(ECacheResult::Hit),
            3 => ::std::option::Option::Some(ECacheResult::Miss),
            4 => ::std::option::Option::Some(ECacheResult::Bad_Request),
            5 => ::std::option::Option::Some(ECacheResult::Unauthorized),
            6 => ::std::option::Option::Some(ECacheResult::Service_Unavailable),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ECacheResult] = &[
            ECacheResult::Internal_Server_Error,
            ECacheResult::Ok,
            ECacheResult::Hit,
            ECacheResult::Miss,
            ECacheResult::Bad_Request,
            ECacheResult::Unauthorized,
            ECacheResult::Service_Unavailable,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ECacheResult>("ECacheResult", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ECacheResult {
}

impl ::std::default::Default for ECacheResult {
    fn default() -> Self {
        ECacheResult::Internal_Server_Error
    }
}

impl ::protobuf::reflect::ProtobufValue for ECacheResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11cacheclient.proto\x12\x0ccache_client\")\n\nGetRequest\x12\x1b\n\t\
    cache_key\x18\x01\x20\x01(\x0cR\x08cacheKey\"z\n\x0bGetResponse\x122\n\
    \x06result\x18\x01\x20\x01(\x0e2\x1a.cache_client.ECacheResultR\x06resul\
    t\x12\x1d\n\ncache_body\x18\x02\x20\x01(\x0cR\tcacheBody\x12\x18\n\x07me\
    ssage\x18\x03\x20\x01(\tR\x07message\"s\n\nSetRequest\x12\x1b\n\tcache_k\
    ey\x18\x01\x20\x01(\x0cR\x08cacheKey\x12\x1d\n\ncache_body\x18\x02\x20\
    \x01(\x0cR\tcacheBody\x12)\n\x10ttl_milliseconds\x18\x03\x20\x01(\rR\x0f\
    ttlMilliseconds\"[\n\x0bSetResponse\x122\n\x06result\x18\x01\x20\x01(\
    \x0e2\x1a.cache_client.ECacheResultR\x06result\x12\x18\n\x07message\x18\
    \x02\x20\x01(\tR\x07message*\x80\x01\n\x0cECacheResult\x12\x19\n\x15Inte\
    rnal_Server_Error\x10\0\x12\x06\n\x02Ok\x10\x01\x12\x07\n\x03Hit\x10\x02\
    \x12\x08\n\x04Miss\x10\x03\x12\x0f\n\x0bBad_Request\x10\x04\x12\x10\n\
    \x0cUnauthorized\x10\x05\x12\x17\n\x13Service_Unavailable\x10\x062\x81\
    \x01\n\x03Scs\x12<\n\x03Get\x12\x18.cache_client.GetRequest\x1a\x19.cach\
    e_client.GetResponse\"\0\x12<\n\x03Set\x12\x18.cache_client.SetRequest\
    \x1a\x19.cache_client.SetResponse\"\0B\x15\n\x11grpc.cache_clientP\x01J\
    \xd2\x08\n\x06\x12\x04\0\0,\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\0\"\n\x08\n\x01\x08\
    \x12\x03\x03\0*\n\t\n\x02\x08\x01\x12\x03\x03\0*\n\x08\n\x01\x02\x12\x03\
    \x05\0\x15\n\n\n\x02\x05\0\x12\x04\x08\0\x10\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x08\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\t\x02\x1c\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\t\x02\x17\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\t\
    \x1a\x1b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\n\x02\t\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03\n\x02\x04\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\n\x07\
    \x08\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0b\x02\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\x0b\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0b\
    \x08\t\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0c\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x0c\x02\x06\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x0c\t\n\n\x0b\n\x04\x05\0\x02\x04\x12\x03\r\x02\x12\n\x0c\n\x05\x05\0\
    \x02\x04\x01\x12\x03\r\x02\r\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\r\x10\
    \x11\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x0e\x02\x13\n\x0c\n\x05\x05\0\x02\
    \x05\x01\x12\x03\x0e\x02\x0e\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x0e\
    \x11\x12\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0f\x02\x1a\n\x0c\n\x05\x05\0\
    \x02\x06\x01\x12\x03\x0f\x02\x15\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\
    \x0f\x18\x19\n\n\n\x02\x06\0\x12\x04\x13\0\x16\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x13\x08\x0b\n\x0b\n\x04\x06\0\x02\0\x12\x03\x14\x02/\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x14\x06\t\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x14\x0b\x15\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x14\x20+\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x15\x02/\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x15\x06\t\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x15\x0b\x15\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x15\x20+\n\n\n\x02\x04\0\x12\x04\x19\0\
    \x1b\x01\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x12\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x1a\x02\x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\x02\x07\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\x08\x11\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x1a\x14\x15\n\n\n\x02\x04\x01\x12\x04\x1d\0!\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1d\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1e\
    \x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1e\x02\x0e\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1e\x0f\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1e\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1f\x02\x17\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x1f\x08\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1f\x15\
    \x16\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x20\x02\x15\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x20\t\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x20\x13\x14\n\n\n\x02\
    \x04\x02\x12\x04#\0'\x01\n\n\n\x03\x04\x02\x01\x12\x03#\x08\x12\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03$\x02\x16\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03$\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\x08\x11\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03$\x14\x15\n\x0b\n\x04\x04\x02\x02\x01\x12\x03%\
    \x02\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03%\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03%\x08\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03%\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\x12\x03&\x02\x1e\n\x0c\n\
    \x05\x04\x02\x02\x02\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03&\t\x19\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03&\x1c\x1d\n\n\
    \n\x02\x04\x03\x12\x04)\0,\x01\n\n\n\x03\x04\x03\x01\x12\x03)\x08\x13\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03*\x02\x1a\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03*\x02\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03*\x0f\x15\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03*\x18\x19\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03+\x02\x15\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03+\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03+\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03+\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
