syntax = "proto3";

option go_package = "github.com/momentohq/client-sdk-go;client_sdk_go";
option java_multiple_files = true;
option java_package = "momento.control.token";
option csharp_namespace = "Momento.Protos.TokenClient";

package token;

message _GenerateApiTokenRequest {
    // generate a token that will never expire
    message Never {}
    // generate a token that has an expiry
    message Expires {
        // how many seconds do you want the api token to be valid for?
        uint32 valid_for_seconds = 1;
    }

    oneof expiry {
        Never never = 1;
        Expires expires = 2;
    }

    // session token recieved from `momento login` command
    string session_token = 3;
}

message _GenerateApiTokenResponse {
    // the api key used for authentication against Momento backend
    string api_key = 1;
    // the token that will allow the api token to be refreshed, which will
    // give you back a new refresh and api token
    string refresh_token = 2;
    // the Momento endpoint that this token is allowed to make requests against
    string endpoint = 3;
    // epoch seconds when the api token expires
    uint64 valid_until = 4;
}

message _RefreshApiTokenRequest {
    string api_token = 1;
    string refresh_token = 2;
}

message _RefreshApiTokenResponse {
    // the token that will be used to make requests against Momento backend
    string api_key = 1;
    // the token that will allow the api token to be refreshed, which will
    // give you back a new refresh and api token
    string refresh_token = 2;
    // the Momento endpoint that this token is allowed to make requests against
    string endpoint = 3;
    // epoch seconds when the api token expires
    uint64 valid_until = 4;
}

service Token {
  // api for programatically generating api and refresh tokens
  rpc GenerateApiToken(_GenerateApiTokenRequest) returns (_GenerateApiTokenResponse) {}
  rpc RefreshApiToken(_RefreshApiTokenRequest) returns (_RefreshApiTokenResponse) {}
}