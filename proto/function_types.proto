syntax = "proto3";

package function_types;

// A Function is an extension of Momento; for users to build their own Momento apis.
message _Function {
  // This unique identifier should change when a function's metadata is updated.
  _FunctionId id = 1;

  // The cache that owns this function, and thereby the context within which it executes.
  string cache_id = 2;

  // The name of the function.
  string name = 3;

  // A convenience for consoles.
  string description = 4;

  // What is the current version of the function set to use upon invocation?
  _CurrentFunctionVersion current_version = 5; 

  // What is the actual latest version of the function?
  uint32 latest_version = 6;
}

message _CurrentFunctionVersion {
  oneof version {
    _Latest latest = 1;
    _Pinned pinned = 2;

  }
  message _Latest {};
  message _Pinned {
    uint32 pinned_version = 1;
  };
}

// A specific version of a Function, it may contain differing values such as new environment variables,
// a different Wasm, etc.
message _FunctionVersion {
  // This unique identifier should change when a function's metadata is updated.
  _FunctionId id = 1;

  // Which wasm ID is this function using?
  // Changing the wasm ID is a Function version change.
  _WasmId wasm_id = 20;

  // The environment variables that are available to this function via the WASI environment interface.
  // Changing the environment variables is a Function version change.
  map<string, _EnvironmentValue> environment = 40;

  // ---------- Some possible future features ---------- //
  // Extra host interfaces beyond the default that are available to this Function.
  // repeated ExtraInterface extra_available_interfaces = 60;
  // Function QoS tier.
  // QualityOfService qos = 61;
}

message _EnvironmentValue {
  oneof value {
    // An environment variable value
    string literal = 1;
    // // A reference to a secret value.
    // string secret_id = 2;
  }
}

// Metadata for a wasm archive. These can exist independently of a Function.
// For example, Templates are just special Wasm archives that are accessible to more than 1 user.
// In this way, we can manage Templates independently of concrete user Functions, and users can
// reuse their wasms across multiple Functions (which would be different configurations).
message _Wasm {
    // The globally unique identifier tuple for this wasm.
    // It may be a shared ID, as in the case of a Template Function, or it may be
    // unique to one Function.
    _WasmId id = 1;

    // The display name of the wasm.
    string display_name = 2;

    // The description of the wasm.
    string description = 3;

    // The actual bytes of the wasm.
    oneof location {
        // The bytes of the wasm are here in this message.
        bytes inline = 20;
        // The wasm is at this s3 url.
        string s3_location = 21;
    }
}

message _FunctionId {
    // Globally unique id, this is stable across versions of the Function.
    string id = 1;
    // A sub-id of sorts. Together with the id, this is a unique identifier for a function configuration.
    uint32 version = 2;
}

message _WasmId {
    // Globally unique id, this is stable across versions of the wasm.
    string id = 1;
    // A sub-id of sorts. Together with the id, this is a unique identifier for a wasm binary.
    uint32 version = 2;
}

// Limits on function execution.
message _FunctionLimits {
  // At which level do these limits apply?
  // When there are multiple matching Limits, greater specificity ___unconditionally___ takes precedence.
  oneof applies_to {
    // The limits apply to all functions in this whole cell.
    // specificity 0, lowest
    string the_whole_cell = 20;
    // The limits apply to all functions in an account.
    // specificity 1
    string account_id = 21;
    // The limits apply to all functions in a cache.
    // specificity 2
    string cache_id = 22;
    // The limits apply to a specific function (irrespective of version).
    // specificity 3, highest
    string function_id = 23;
  }

  // How many concurrent instances of this function can be running?
  // Default is 10.
  _NumberLimit per_host_concurrency = 1;

  // How many times can this function be called per second?
  // Default is 10.
  _NumberLimit per_host_rate = 2;

  // How long can each instance of this function run for?
  // Default is 10 seconds.
  _NumberLimit wall_clock_timeout_seconds = 3;

  // How much memory can each instance of this function use?
  // Default is 8MiB.
  _NumberLimit memory_bytes = 4;

  message _NumberLimit {
    oneof limit {
      uint64 limit_value = 1;
      _Unlimited unlimited = 2;
      _Default default = 3;
    }
  }
  message _Unlimited {}
  message _Default {}
}

// ---------------- Possible futures ---------------- //

// // Extra host interfaces beyond the default that are available to this Function.
// message ExtraInterface {
//     // Why is this interface available on this function?
//     string comment = 1;
//     oneof interface {
//         SpecialFoxInterfaces fox = 100;
//     }

//     // an example of a declaration of a special host interface.
//     // This is how you would declare and configure any special host interfaces that are not generally available
//     message SpecialFoxInterfaces {
//     }
// }

// // A possible enum for QoS.
// enum QualityOfService {
//     // Low priority. Low cost. When the host is busy, this class will receive less time than higher classes.
//     ECONOMY = 0;
//     // Normal priority. Normal cost. Functions in this class will receive a fair share of the host's resources.
//     STANDARD = 1;
//     // High priority. High cost. Functions in this class will receive preferential scheduling.
//     REALTIME = 2;
// }
