syntax = "proto3";

package function_types;

// A Function is an extension of Momento; for users to build their own Momento apis.
message _Function {
  // This unique identifier should change when a function's metadata is updated.
  _FunctionId id = 1;

  // The name of the function.
  string name = 2;

  // A convenience for consoles.
  string description = 3;

  // What is the current version of the function set to use upon invocation?
  _CurrentFunctionVersion current_version = 4; 

  // What is the actual latest version of the function?
  uint32 latest_version = 5;
}

message _CurrentFunctionVersion {
  oneof version {
    _Latest latest = 1;
    _Pinned pinned = 2;

  }
  message _Latest {};
  message _Pinned {
    uint32 pinned_version = 1;
  };
}

// A specific version of a Function, it may contain differing values such as new environment variables,
// a different Wasm, etc.
message _FunctionVersion {
  // This unique identifier should change when a function's metadata is updated.
  _FunctionId id = 1;

  // Which wasm ID is this function using?
  // Changing the wasm ID is a Function version change.
  _WasmId wasm_id = 20;

  // The environment variables that are available to this function via the WASI environment interface.
  // Changing the environment variables is a Function version change.
  map<string, _EnvironmentValue> environment = 40;

  // ---------- Some possible future features ---------- //
  // Extra host interfaces beyond the default that are available to this Function.
  // repeated ExtraInterface extra_available_interfaces = 60;
  // Function QoS tier.
  // QualityOfService qos = 61;
}

message _EnvironmentValue {
  oneof value {
    // An environment variable value
    string literal = 1;
  }
}

// Metadata for a wasm archive. These can exist independently of a Function.
// For example, Templates are just special Wasm archives that are accessible to more than 1 user.
// In this way, we can manage Templates independently of concrete user Functions, and users can
// reuse their wasms across multiple Functions (which would be different configurations).
message _Wasm {
    // The globally unique identifier tuple for this wasm.
    // It may be a shared ID, as in the case of a Template Function, or it may be
    // unique to one Function.
    _WasmId id = 1;

    // The display name of the wasm.
    string display_name = 2;

    // The description of the wasm.
    string description = 3;

    // The actual bytes of the wasm.
    oneof location {
        // The bytes of the wasm are here in this message.
        bytes inline = 20;
        // The wasm is at this s3 url.
        string s3_location = 21;
    }
}

message _FunctionId {
    // Globally unique id, this is stable across versions of the Function.
    string id = 1;
    // A sub-id of sorts. Together with the id, this is a unique identifier for a function configuration.
    uint32 version = 2;
}

message _WasmId {
    // Globally unique id, this is stable across versions of the wasm.
    string id = 1;
    // A sub-id of sorts. Together with the id, this is a unique identifier for a wasm binary.
    uint32 version = 2;
}
