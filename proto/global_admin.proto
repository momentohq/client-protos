syntax = "proto3";

option go_package = "github.com/momentohq/client-sdk-go;client_sdk_go";
option java_multiple_files = true;
option java_package = "grpc.global_admin";
option csharp_namespace = "Momento.Protos.GlobalAdmin";

package global_admin;

service GlobalAdmin {
  rpc GetAccounts(_GetAccountsRequest) returns(_GetAccountsResponse) {}
  rpc GetAccountSessionToken (_GetAccountSessionTokenRequest) returns(_GetAccountSessionTokenResponse) {}
  rpc AddMember(_AddMemberRequest) returns(_AddMemberResponse) {}
  rpc RemoveMember(_RemoveMemberRequest) returns(_RemoveMemberResponse) {}
  rpc ListMembers(_ListMembersRequest) returns(_ListMembersResponse) {}
  rpc GetEndpointsForAccount(_GetEndpointsForAccountRequest) returns (_GetEndpointsForAccountResponse) {}
  rpc SetAccountName(_SetAccountNameRequest) returns (_SetAccountNameResponse) {}
}

message _SetAccountNameRequest {
  string account_name = 1;
}

message _SetAccountNameResponse {
}

// No parameters required - we derive identity from the auth header.
message _GetAccountsRequest {
}

message _GetAccountsResponse {
  repeated _Account accounts = 1;
}

message _Account {
  string id = 1;
  string account_name = 2;
}

message _GetAccountSessionTokenRequest {
  string account_id = 1;
}

message _GetAccountSessionTokenResponse {
  string account_session_token = 1;
}

// API Key needs to be provided via the "authorization" header.
// The Account to add the User to is derived from the API key, which is account-scoped.
message _AddMemberRequest {
  string user_name = 1;
}

// This response is for when a Member is added successfully to the Account,
// including the case when the Member is already a Member.
// These are some of the Errors and their corresponding GRPC status codes.
// 1. User is already a Member. grpc code = FAILED_PRECONDITION. Metadata: "err" -> "already_a_member".
// 2. User does not exist. grpc code = NOT_FOUND. Metadata: "err" -> "user_not_found".
// 3. Account has too many Members. grpc code = RESOURCE_EXHAUSTED. Metadata: "err" -> "max_member_count_exceeded".
message _AddMemberResponse {
}

// API Key needs to be provided via the "authorization" header.
// The Account to remove the User from is derived from the API key, which is account-scoped.
message _RemoveMemberRequest {
  string user_name = 1;
}

// This response is for when a Member is removed successfully from an Account.
// These are some of the Errors and their corresponding GRPC status codes:
// 1. User is not a Member. grpc code = FAILED_PRECONDITION. Metadata: "err" -> "user_is_not_a_member".
// 2. a non-owner Member may not be removed. grpc code = PERMISSION_DENIED. Metadata: "err" -> "owner_cannot_be_removed".
// Note that to remove an Owner, customers need to reach out to us so we can run mm commands for them.
message _RemoveMemberResponse {
}

// API Key needs to be provided via the "authorization" header.
// The Account to list the Users is derived from the API key, which is account-scoped.
message _ListMembersRequest {
}

enum Role {
  OWNER = 0;
  MEMBER = 1;
}

message _Member {
  string user_name = 1;
  Role role = 2;
}

message _ListMembersResponse {
  repeated _Member members = 1;
}

// API Key needs to be provided via the "authorization" header.
// The Account is derived from the API key, which is account-scoped.
message _GetEndpointsForAccountRequest {
}

message _GetEndpointsForAccountResponse {
  repeated Endpoint endpoints = 1;
}

message Endpoint {
  string friendly_name = 1; // the name displayed in the Console, e.g. 'us-west-2', 'private-us-west-2', etc.
  string domain_name = 2; // domain name for talking to this Endpoint, e.g. `cell-4-us-west-2-1.prod.a.momentohq.com`
  string region = 3; // AWS region, e.g. `us-west-2`
}
